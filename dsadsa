t_channel	rt_trace_ray(t_ray ray, t_rt *rt, double *dist_range, int depth)
{
	t_channel	local_color;
	t_channel	reflected_color;
	t_channel 	transparency_color;
	t_intersect	inter;
	double		i;

	if (!rt_find_closest_obj(ray, rt->objs, &inter, dist_range))
		return ((t_channel) {0, 0, 0});
	inter.hit = ray.origin + inter.dist * ray.direction;
	inter.normal = rt_calc_normal(&inter, ray);
	i = rt_compute_lighting(rt->objs, rt->lights, ray, &inter);
	local_color = rt_enlightenment(inter.closest_obj->color, i);
	if (depth <= 0 || inter.closest_obj->reflection <= 0)
		return (local_color);
	ray.origin = inter.hit;
	transparency_color = rt_trace_ray(ray, rt,
		(double[2]) {0.001, DBL_MAX}, depth - 1);
	ray.direction = rt_reflect_ray(inter.normal, -ray.direction);
	ray.origin = inter.hit;
	reflected_color = rt_trace_ray(ray, rt,
		(double[2]) {0.001, DBL_MAX}, depth - 1);
	return (rt_calc_reflected_color(local_color, reflected_color,
		inter.closest_obj->reflection, transparency_color));
}

t_channel	rt_calc_reflected_color(t_channel local_color,
				t_channel reflected_color, double r, t_channel trancperency_color)
{
	local_color.r = local_color.r * (1 - r) + reflected_color.r * r / 2 + trancperency_color.r * r / 2;
	local_color.g = local_color.g * (1 - r) + reflected_color.g * r / 2 + trancperency_color.r * r / 2;
	local_color.b = local_color.b * (1 - r) + reflected_color.b * r / 2 + trancperency_color.r * r / 2;
	return (local_color);
}

